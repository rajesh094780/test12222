name: Oracle DB Refresh - SSL
on:
  workflow_dispatch:
    inputs:
      #customercode:
      #  description: "CUSTOMER CODE"
      #  required: true

      sourceserverwinstance:
        description: "SOURCE SERVER WITH INSTANCE ('abc.jdadelivers.com/instance')"
        required: true
        default: '1'

      targetserverwinstance:
        description: "TARGET SERVER WITH INSTANCE ('xyz.jdadelivers.com/instance')"
        required: true
        default: '1'

      utilityserver:
        description: "Provide Utiltity Server of Target DB Server"
        required: true
        default: '1'
      commvaultscheduledstartdate:
        description: "COMMVAULT SCHEDULE START TIME DATE (YYYY-MM-DD)"
        required: true
        default: '1'

      commvaultscheduleddate:
        description: "COMMVAULT SCHEDULE END TIME DATE (YYYY-MM-DD)"
        required: true
        default: '1'

      condition_variables:
          description: "serviceNow_urls"
          required: true
          

      sfcaseno:
        description: "SNOW TICKET"
        required: true
        default: '1'

      requestoremail:
        description: "REQUESTOR EMAIL ID"
        required: true
        default: '1'

      adhocexport:
        type: choice
        description: "Adhoc export and import?"
        default: "na"
        options:
          - "na"
          - "tableexport"
          - "schemaexport"

      endPointUrls:        
        description: "AWX end point urls"
        default: '1'


env:
  endPointUrls: "${{ github.event.inputs.endPointUrls }}"
  DEFAULT_SUBSCRIPTION: "sss"
  #CUSTOMER_CODE: "${{ github.event.inputs.customercode }}"
  SOURCESERVERWITHINSTANCE: "${{ github.event.inputs.sourceServerwinstance }}"
  TARGETSERVERWITHINSTANCE: "${{ github.event.inputs.targetServerwinstance }}"
  utilityServer: "${{ github.event.inputs.utilityserver }}"
  COMMVAULTSCHEDULESTARTDATE: "${{ github.event.inputs.commvaultscheduledstartdate }}"
  COMMVAULTSCHEDULEDATE: "${{ github.event.inputs.commvaultscheduleddate }}"
  SFCASENO: "${{ github.event.inputs.sfcaseno }}"
  REQUESTOREMAIL: "${{ github.event.inputs.requestoremail }}"
  runner: "veus2core1120"
  REQUESTOR: "${{ github.actor }}"
  zabbix_User: "ss"
  SCRIPTPATH: ".github/workflows"
  ansible_user: "ss"
  commvault_user: "s\\ss"
  postDBchoice: "yes"
  pyInventoryPath: "ssss"
  adhocexportchoice: "${{ github.event.inputs.adhocexport }}"
  Adhocpar: "${{ github.event.inputs.adhocpar }}"
  condition_variables: "${{ github.event.inputs.condition_variables }}"
  iautomate_user: 'sssss'

jobs:
  GET_DETAILS_FROM_AZURE:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: test
        run: |
          echo 'hello'
  IF_VALIDATIONS_FAILS:
    runs-on: ubuntu-latest
    needs: [GET_DETAILS_FROM_AZURE]
    steps:
      - uses: actions/checkout@v3
      - name: test
        run: |
          echo 'hello'
  Validate_DB_VM_Authentication:
    needs: [GET_DETAILS_FROM_AZURE]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: test
        run: |
          echo 'hello'
  Validate_Existing_Job:
    needs: [GET_DETAILS_FROM_AZURE,Validate_DB_VM_Authentication]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: test
        run: |
          echo 'hello'
  GET_APP_SERVER_DETAILS_AZURE:
    needs: [GET_DETAILS_FROM_AZURE, Validate_Existing_Job] #Get_SID_FROM_DBSERVER]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: test
        run: |
          echo 'hello'
